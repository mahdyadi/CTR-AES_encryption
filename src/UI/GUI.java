package UI;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import aeswithctr.AESWithCTR;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Drianka Mahdy
 */
public class GUI extends javax.swing.JFrame {
    AESWithCTR backend;

    /**
     * Creates new form GUI
     */
    public GUI() {
        backend = new AESWithCTR();
        initComponents();
        LogField.append("CTR-AES generator.");
        LogField.append("\nCreated by:");
        LogField.append("\nDrianka Mahdy Adimas - 1406572006");
        LogField.append("\nRadhitya Rahman - 1406623335");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        KeyPanel = new javax.swing.JPanel();
        KeyLengthList = new javax.swing.JComboBox<>();
        KeyInputField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        RandomKeyBtn = new javax.swing.JButton();
        InputPanel = new javax.swing.JPanel();
        FileInputField = new javax.swing.JTextField();
        FileInputBtn = new javax.swing.JButton();
        OutputPanel = new javax.swing.JPanel();
        FileOutputField = new javax.swing.JTextField();
        FileOutputBtn = new javax.swing.JButton();
        SameDirCheckbox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        EncryptBtn = new javax.swing.JButton();
        DecryptBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogField = new javax.swing.JTextArea();
        InitialVectorPanel = new javax.swing.JPanel();
        InitialVectorField = new javax.swing.JTextField();
        InitialVectorRandomBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTR-AES");

        KeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Key"));

        KeyLengthList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));

        jLabel1.setText("bit");

        RandomKeyBtn.setText("Randomly generate");
        RandomKeyBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RandomKeyBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout KeyPanelLayout = new javax.swing.GroupLayout(KeyPanel);
        KeyPanel.setLayout(KeyPanelLayout);
        KeyPanelLayout.setHorizontalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(KeyInputField)
                    .addGroup(KeyPanelLayout.createSequentialGroup()
                        .addComponent(KeyLengthList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                        .addComponent(RandomKeyBtn)))
                .addContainerGap())
        );
        KeyPanelLayout.setVerticalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(KeyLengthList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RandomKeyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(KeyInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        InputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input file"));
        InputPanel.setName(""); // NOI18N

        FileInputBtn.setText("Browse");
        FileInputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileInputBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputPanelLayout = new javax.swing.GroupLayout(InputPanel);
        InputPanel.setLayout(InputPanelLayout);
        InputPanelLayout.setHorizontalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileInputField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FileInputBtn)
                .addContainerGap())
        );
        InputPanelLayout.setVerticalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileInputBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        OutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output file"));

        FileOutputBtn.setText("Browse");
        FileOutputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileOutputBtnActionPerformed(evt);
            }
        });

        SameDirCheckbox.setText("Output on the same directory with suffix");
        SameDirCheckbox.setToolTipText("Output file will be outputted in the same directory with suffix based on operation choosen (Enc or Dec)");
        SameDirCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SameDirCheckboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout OutputPanelLayout = new javax.swing.GroupLayout(OutputPanel);
        OutputPanel.setLayout(OutputPanelLayout);
        OutputPanelLayout.setHorizontalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addComponent(FileOutputField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FileOutputBtn))
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addComponent(SameDirCheckbox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        OutputPanelLayout.setVerticalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileOutputBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SameDirCheckbox)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        EncryptBtn.setText("Encrypt");
        EncryptBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EncryptBtnMouseClicked(evt);
            }
        });

        DecryptBtn.setText("Decrypt");
        DecryptBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DecryptBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EncryptBtn)
                .addGap(11, 11, 11)
                .addComponent(DecryptBtn)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EncryptBtn)
                    .addComponent(DecryptBtn))
                .addContainerGap())
        );

        LogField.setEditable(false);
        LogField.setColumns(20);
        LogField.setRows(5);
        jScrollPane1.setViewportView(LogField);

        InitialVectorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Initial Vector"));

        InitialVectorField.setToolTipText("input 128 bit or 16 byte hex");

        InitialVectorRandomBtn.setText("Randomly generate");
        InitialVectorRandomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InitialVectorRandomBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout InitialVectorPanelLayout = new javax.swing.GroupLayout(InitialVectorPanel);
        InitialVectorPanel.setLayout(InitialVectorPanelLayout);
        InitialVectorPanelLayout.setHorizontalGroup(
            InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitialVectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InitialVectorField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InitialVectorPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(InitialVectorRandomBtn)))
                .addContainerGap())
        );
        InitialVectorPanelLayout.setVerticalGroup(
            InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitialVectorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(InitialVectorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InitialVectorRandomBtn))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(KeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InitialVectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(KeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InitialVectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileInputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileInputBtnActionPerformed
        // TODO add your handling code here:
        FileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = FileChooser.showOpenDialog(KeyPanel.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            FileInputField.setText(FileChooser.getSelectedFile().getAbsolutePath());
            LogField.append("\nSet as input: "+FileChooser.getSelectedFile().getName()+".");
        } else {
             LogField.append("\nCancelling file input.");
        }
    }//GEN-LAST:event_FileInputBtnActionPerformed

    private void RandomKeyBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RandomKeyBtnMouseClicked
        // TODO add your handling code here:
        int keyLength = Integer.parseInt(KeyLengthList.getSelectedItem().toString());
        byte[] key = backend.generateBytes((int)Math.floor(keyLength/8));
        String keyHex = DatatypeConverter.printHexBinary(key);
        KeyInputField.setText(keyHex);
        LogField.append("\nRandom key generated.");
        LogField.append("\n"+key.length+" byte generated.");
        LogField.append("\n"+keyHex.length()+" long hex string shown converted from key bytes.");
        byte[] key2 = DatatypeConverter.parseHexBinary(keyHex);
        if(Arrays.equals(key, key2)){
            LogField.append("\nNo problem with keys");
        } else{
            LogField.append("\nproblem with converting keys");
        }
    }//GEN-LAST:event_RandomKeyBtnMouseClicked

    private void FileOutputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileOutputBtnActionPerformed
        // TODO add your handling code here:
        FileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = FileChooser.showSaveDialog(KeyPanel.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            FileOutputField.setText(FileChooser.getSelectedFile().getAbsolutePath());
            LogField.append("\nSet as Output: "+FileChooser.getSelectedFile().getName()+".");
        } else {
            LogField.append("\nCancelling set output file.");
        }
    }//GEN-LAST:event_FileOutputBtnActionPerformed

    private void DecryptBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DecryptBtnMouseClicked
        // TODO add your handling code here:
        if(InitialVectorField.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Initial Vector must be set!",
                    "Initial Vector is Empty",JOptionPane.WARNING_MESSAGE);
            return;
        }
        byte[] initialVector = DatatypeConverter.parseHexBinary(InitialVectorField.getText());
               
        try{
            Cipher decryptionCipher = backend.decryptCipher(initialVector, DatatypeConverter.parseHexBinary(KeyInputField.getText()));
            File input = new File(FileInputField.getText());
            File output;
            if(SameDirCheckbox.isSelected()){
                String[] name = input.getName().split("\\.");
                System.out.println(input.getName());
                output = new File(input.getAbsolutePath()+".dec."+name[name.length-2]);
                LogField.append("\nSet Output to: "+output.getAbsolutePath()+".");
            } else{
                output = new File(FileOutputField.getText());
            }
            FileInputStream fis = new FileInputStream(input);
            CipherOutputStream cos = new CipherOutputStream(
                    new FileOutputStream(output,false),decryptionCipher);
            
            byte[] stream = 
                    new byte[(int)Math.floor(
                            (Integer.parseInt(
                                    KeyLengthList.getSelectedItem().toString()
                            ))/8)]; 
            int count;
            
            while((fis.read(stream)) > 0){
                cos.write(stream);
            }
            fis.close();
            cos.close();
            LogField.append("\nDecryption done.");
        }catch(Exception e){
            LogField.append("\nDecryption failed.");
            LogField.append("\n"+e.getMessage());
            e.printStackTrace();
        } 
    }//GEN-LAST:event_DecryptBtnMouseClicked

    private void EncryptBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EncryptBtnMouseClicked
        // TODO add your handling code here:
        if(InitialVectorField.getText().isEmpty()){
            JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Initial Vector must be set!",
                    "Initial Vector is Empty",JOptionPane.WARNING_MESSAGE);
            return;
        }
        byte[] initialVector = DatatypeConverter.parseHexBinary(InitialVectorField.getText());
       
        try{
            Cipher encryptionCipher = backend.encryptCipher(initialVector, DatatypeConverter.parseHexBinary(KeyInputField.getText()));
            File input = new File(FileInputField.getText());
            File output;
            if(SameDirCheckbox.isSelected()){
                output = new File(input.getAbsolutePath()+".enc");
                LogField.append("\nSet Output to: "+output.getAbsolutePath()+".");
            } else{
                output = new File(FileOutputField.getText());
            }
           
            FileInputStream fis = new FileInputStream(input);
            CipherOutputStream cos = new CipherOutputStream(
                    new FileOutputStream(output,false),encryptionCipher);
            
            byte[] stream = 
                    new byte[(int)Math.floor(
                            (Integer.parseInt(
                                    KeyLengthList.getSelectedItem().toString()
                            ))/8)]; 
            int count;
            
            while((fis.read(stream)) > 0){
                cos.write(stream);
            }
            fis.close();
            cos.close();
            LogField.append("\nEncryption done.");
        }catch(Exception e){
            LogField.append("\nEncryption failed.");
            LogField.append("\n"+e.getMessage());
            e.printStackTrace();
        } 
    }//GEN-LAST:event_EncryptBtnMouseClicked

    private void InitialVectorRandomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InitialVectorRandomBtnMouseClicked
        // TODO add your handling code here:
        int keyLength = 128;
        byte[] key = backend.generateBytes((int)Math.floor(keyLength/8));
        String keyHex = DatatypeConverter.printHexBinary(key);
        InitialVectorField.setText(keyHex);
        LogField.append("\nRandom IV generated.");
        LogField.append("\n"+key.length+" byte generated.");
        LogField.append("\n"+keyHex.length()+" long hex string shown converted from key bytes.");
        byte[] key2 = DatatypeConverter.parseHexBinary(keyHex);
        if(Arrays.equals(key, key2)){
            LogField.append("\nNo problem with keys");
        } else{
            LogField.append("\nproblem with converting keys");
        }
    }//GEN-LAST:event_InitialVectorRandomBtnMouseClicked

    private void SameDirCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SameDirCheckboxItemStateChanged
        // TODO add your handling code here:
        if(SameDirCheckbox.isSelected()){
            FileOutputField.setText("");
            FileOutputField.setEditable(false);
            FileOutputField.setEnabled(false);
            FileOutputBtn.setEnabled(false);
        } else{
            FileOutputField.setEnabled(true);
            FileOutputField.setEditable(true);
            FileOutputBtn.setEnabled(true);
        }
    }//GEN-LAST:event_SameDirCheckboxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DecryptBtn;
    private javax.swing.JButton EncryptBtn;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JButton FileInputBtn;
    private javax.swing.JTextField FileInputField;
    private javax.swing.JButton FileOutputBtn;
    private javax.swing.JTextField FileOutputField;
    private javax.swing.JTextField InitialVectorField;
    private javax.swing.JPanel InitialVectorPanel;
    private javax.swing.JButton InitialVectorRandomBtn;
    private javax.swing.JPanel InputPanel;
    private javax.swing.JTextField KeyInputField;
    private javax.swing.JComboBox<String> KeyLengthList;
    private javax.swing.JPanel KeyPanel;
    private javax.swing.JTextArea LogField;
    private javax.swing.JPanel OutputPanel;
    private javax.swing.JButton RandomKeyBtn;
    private javax.swing.JCheckBox SameDirCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
