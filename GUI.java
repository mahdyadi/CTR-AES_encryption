
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.io.File;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Drianka Mahdy
 */
public class GUI extends javax.swing.JFrame {
	// Special buat tampilin gambar
	
	private GambarP gpPanel;
	
	boolean checkIfImg = false;
	
	File fileAs;
	
	//
	
    AESWithCTR backend;
	

    /**
     * Creates new form GUI
     */
    public GUI() {
        backend = new AESWithCTR();
        initComponents();
        LogField.append("CTR-AES generator.");
        LogField.append("\nCreated by:");
        LogField.append("\nDrianka Mahdy Adimas - 1406572006");
        LogField.append("\nRadhitya Rahman - 1406623335");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
		// Special buat tampilin gambar
		
		gpPanel = new GambarP();
		
		//

        FileChooser = new javax.swing.JFileChooser();
        InputPanel = new javax.swing.JPanel();
        FileInputField = new javax.swing.JTextField();
        FileInputBtn = new javax.swing.JButton();
        OutputPanel = new javax.swing.JPanel();
        FileOutputField = new javax.swing.JTextField();
        FileOutputBtn = new javax.swing.JButton();
        SameDirCheckbox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        EncryptBtn = new javax.swing.JButton();
        DecryptBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogField = new javax.swing.JTextArea();
        InitialVectorPanel = new javax.swing.JPanel();
        InitialVectorField = new javax.swing.JTextField();
        InitialVectorRandomBtn = new javax.swing.JButton();
        KeyTabbedPanel = new javax.swing.JTabbedPane();
        KeyFilePanel = new javax.swing.JPanel();
        KeyFileInputField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        KeyLengthListFile = new javax.swing.JComboBox<>();
        KeyFromFileBrowseBtn = new javax.swing.JButton();
        KeyPanel = new javax.swing.JPanel();
        KeyLengthList = new javax.swing.JComboBox<>();
        RandomKeyBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        KeyInputField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTR-AES");

		/**
		*
		* Panel "Input file"
		*
		*/
        InputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input file"));
        InputPanel.setName(""); // NOI18N

        FileInputBtn.setText("Open ...");
        FileInputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileInputBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputPanelLayout = new javax.swing.GroupLayout(InputPanel);
        InputPanel.setLayout(InputPanelLayout);
        InputPanelLayout.setHorizontalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileInputField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FileInputBtn)
                .addContainerGap())
        );
        InputPanelLayout.setVerticalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileInputBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
		/**
		*
		* Panel "Output file"
		*
		*/
		OutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output file"));

        FileOutputBtn.setText("Browse");
        FileOutputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileOutputBtnActionPerformed(evt);
            }
        });

        SameDirCheckbox.setText("Output on the same directory with suffix");
        SameDirCheckbox.setToolTipText("Output file will be outputted in the same directory with suffix based on operation choosen (Enc or Dec)");
        SameDirCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SameDirCheckboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout OutputPanelLayout = new javax.swing.GroupLayout(OutputPanel);
        OutputPanel.setLayout(OutputPanelLayout);
        OutputPanelLayout.setHorizontalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addComponent(FileOutputField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FileOutputBtn))
                    .addGroup(OutputPanelLayout.createSequentialGroup()
                        .addComponent(SameDirCheckbox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        OutputPanelLayout.setVerticalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileOutputBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SameDirCheckbox)
                .addContainerGap(9, Short.MAX_VALUE))
        );
		
		/**
		*
		* Panel untuk button encrypt, decrypt
		*
		*/
        EncryptBtn.setText("(En-De):Crypt");
        EncryptBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnDecryptBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EncryptBtn)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EncryptBtn))
                .addContainerGap())
        );

		/**
		*
		* Panel LogField pojok kiri bawah
		*
		*/
        LogField.setEditable(false);
        LogField.setColumns(20);
        LogField.setRows(5);
        jScrollPane1.setViewportView(LogField);

		/**
		*
		* Panel IV
		*
		*/
        InitialVectorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Initial Vector"));

        InitialVectorField.setToolTipText("input 128 bit or 16 byte hex");

        InitialVectorRandomBtn.setText("Randomly generate");
        InitialVectorRandomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InitialVectorRandomBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout InitialVectorPanelLayout = new javax.swing.GroupLayout(InitialVectorPanel);
        InitialVectorPanel.setLayout(InitialVectorPanelLayout);
        InitialVectorPanelLayout.setHorizontalGroup(
            InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitialVectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InitialVectorField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InitialVectorPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(InitialVectorRandomBtn)))
                .addContainerGap())
        );
        InitialVectorPanelLayout.setVerticalGroup(
            InitialVectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitialVectorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(InitialVectorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InitialVectorRandomBtn))
        );

		// Panel "Key from file" pojok kiri atas tab sebelah kiri
        KeyLengthListFile.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));

        KeyFromFileBrowseBtn.setText("Browse");
        KeyFromFileBrowseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KeyFromFileBrowseBtnMouseClicked(evt);
            }
        });

        jLabel2.setText("bit");

        javax.swing.GroupLayout KeyFilePanelLayout = new javax.swing.GroupLayout(KeyFilePanel);
        KeyFilePanel.setLayout(KeyFilePanelLayout);
        KeyFilePanelLayout.setHorizontalGroup(
            KeyFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(KeyFileInputField)
                    .addGroup(KeyFilePanelLayout.createSequentialGroup()
                        .addComponent(KeyLengthListFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                        .addComponent(KeyFromFileBrowseBtn)))
                .addContainerGap())
        );
        KeyFilePanelLayout.setVerticalGroup(
            KeyFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KeyFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyLengthListFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(KeyFromFileBrowseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeyFileInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        KeyTabbedPanel.addTab("Key from file", KeyFilePanel);

		// Panel "Key from text" pojok kiri atas tab sebelah kanan
        KeyLengthList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));

        RandomKeyBtn.setText("Randomly generate");
        RandomKeyBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RandomKeyBtnMouseClicked(evt);
            }
        });

        jLabel1.setText("bit");

        javax.swing.GroupLayout KeyPanelLayout = new javax.swing.GroupLayout(KeyPanel);
        KeyPanel.setLayout(KeyPanelLayout);
        KeyPanelLayout.setHorizontalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(KeyInputField)
                    .addGroup(KeyPanelLayout.createSequentialGroup()
                        .addComponent(KeyLengthList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(RandomKeyBtn)))
                .addContainerGap())
        );
        KeyPanelLayout.setVerticalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyLengthList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RandomKeyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeyInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        KeyTabbedPanel.addTab("Key from text", KeyPanel);

		// Panel Image pojok kanan atas frame
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
			.addComponent(gpPanel)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
			.addComponent(gpPanel)
        );
		
		// Panel Hex pojok kanan bawah frame
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Hex"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
		
		// Menggabung semua component ke dalam satu group layout
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KeyTabbedPanel)
                    .addComponent(OutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InitialVectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(KeyTabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(InitialVectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileInputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileInputBtnActionPerformed
        // TODO add your handling code here:
        FileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = FileChooser.showOpenDialog(KeyTabbedPanel.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            FileInputField.setText(FileChooser.getSelectedFile().getAbsolutePath());
			
            LogField.append("\nSet as input: "+FileChooser.getSelectedFile().getName()+".");
			
			setFile(FileChooser.getSelectedFile());
			testFileImgur();
			
		} else {
			 LogField.append("\nCancelling file input.");
		}
    }//GEN-LAST:event_FileInputBtnActionPerformed
	
	private void testFileImgur() {
		String fif = FileInputField.getText();
		int f = fif.length();
		int f3 = fif.length()-4;
		int f4 = fif.length()-5;
		String[] iFormat = {".ani",".bmp",".cal",".fax",".gif",".img",".jbg",".jpe",".jpg",".mac",".pbm",".pcd",".pcx",".pct",".pgm",".png",".ppm",".psd",".ras",".tga",".wmf",".jpeg",".tiff"};
	
		for(int i = 0; i < iFormat.length; i++) {
			try {
				if(fif.substring(f3,f).equalsIgnoreCase(iFormat[i]) || fif.substring(f4,f).equalsIgnoreCase( iFormat[i])) {
					checkIfImg = true;
					LogField.append("\nThe input is image");
					LogField.append("\nTry to show the picture..");
					BufferedImage img = null;
					try {
						img = ImageIO.read(FileChooser.getSelectedFile());
						LogField.append("\n\nThe picture has succeed to uploaded!!!");
					} catch (Exception e) {
						LogField.append("\nFailed to show the picture!");
					}
					gpPanel.setImage(img);
					return;
				}					
			} catch (Exception e) {}
		}
		gpPanel.setImage(null);
		checkIfImg = false;
	}

    private void FileOutputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileOutputBtnActionPerformed
        // TODO add your handling code here:
        FileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = FileChooser.showSaveDialog(KeyTabbedPanel.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            FileOutputField.setText(FileChooser.getSelectedFile().getAbsolutePath());
            LogField.append("\nSet as Output: "+FileChooser.getSelectedFile().getName()+".");
        } else {
            LogField.append("\nCancelling set output file.");
        }
    }//GEN-LAST:event_FileOutputBtnActionPerformed

    private void EnDecryptBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EncryptBtnMouseClicked
        // TODO add your handling code here:
        String ivInput = InitialVectorField.getText();
        if(ivInput.isEmpty()){
            JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Initial Vector must be set!",
                    "Initial Vector is Empty",JOptionPane.WARNING_MESSAGE);
            return;
        } else if(ivInput.length() != 32){
            JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Initial Vector must be 128 bits",
                    "Initial Vector is not valid",JOptionPane.WARNING_MESSAGE);
            return;
        }
        byte[] initialVector = DatatypeConverter.parseHexBinary(InitialVectorField.getText());
       
        try{
            Cipher encryptionCipher;
            String keyInput;
            if(KeyTabbedPanel.getSelectedIndex() == 0){
                File keyFile = new File(KeyFileInputField.getText());
                BufferedReader br = new BufferedReader(new FileReader(keyFile));
                keyInput = br.readLine();
            } else{
                keyInput = KeyInputField.getText();
            }
            encryptionCipher = backend.encryptCipher(initialVector, DatatypeConverter.parseHexBinary(keyInput));
			
			File input = new File(FileInputField.getText());
            if(!input.exists()){
                JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Input file not found",
                    "Encryption failed",JOptionPane.WARNING_MESSAGE);
                return;
            }
            File output;
            if(SameDirCheckbox.isSelected()){
                output = new File(input.getAbsolutePath()+".endec");
                LogField.append("\nSet Output to: "+output.getAbsolutePath()+".");
				FileInputField.setText(input.getAbsolutePath()+".endec");
            } else{
                output = new File(FileOutputField.getText());
				FileInputField.setText(FileOutputField.getText());
            }
            if(output.getName().equals("")){
                JOptionPane.showMessageDialog(
                    KeyPanel.getParent(),"Output file cannot be empty",
                    "Encryption failed",JOptionPane.WARNING_MESSAGE);
                return;
            }
			
            FileInputStream fis = new FileInputStream(input);
            CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(output,false),encryptionCipher);
					
            byte[] stream = new byte[(int)Math.floor((Integer.parseInt(KeyLengthList.getSelectedItem().toString()))/8)];
            
            while((fis.read(stream)) > 0){
                cos.write(stream);
            }
            fis.close();
            cos.close();
			if(checkIfImg) {
				gpPanel.setImage(map(gpPanel.getImage(),encryptionCipher));
			}
            LogField.append("\n(En-De):Cryption done.");
        }catch(Exception e){
			System.out.println("Error:" + e);
        } 
    }//GEN-LAST:event_EncryptBtnMouseClicked

    private void InitialVectorRandomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InitialVectorRandomBtnMouseClicked
        // TODO add your handling code here:
        int keyLength = 128;
        byte[] key = backend.generateBytes((int)Math.floor(keyLength/8));
        String keyHex = DatatypeConverter.printHexBinary(key);
        InitialVectorField.setText(keyHex);
        LogField.append("\nRandom IV generated.");
        LogField.append("\n"+key.length+" byte generated.");
        LogField.append("\n"+keyHex.length()+" long hex string shown converted from IV bytes.");
        byte[] key2 = DatatypeConverter.parseHexBinary(keyHex);
        if(Arrays.equals(key, key2)){
            LogField.append("\nNo problem with IV");
        } else{
            LogField.append("\nproblem with converting IV");
        }
    }//GEN-LAST:event_InitialVectorRandomBtnMouseClicked
	
    private void KeyFromFileBrowseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KeyFromFileBrowseBtnMouseClicked
        // TODO add your handling code here:
        FileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = FileChooser.showOpenDialog(KeyTabbedPanel.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            KeyFileInputField.setText(FileChooser.getSelectedFile().getAbsolutePath());
            LogField.append("\nSet as key input: "+FileChooser.getSelectedFile().getName()+".");
        } else {
            LogField.append("\nCancelling set key file.");
        }
    }//GEN-LAST:event_KeyFromFileBrowseBtnMouseClicked

    private void RandomKeyBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RandomKeyBtnMouseClicked
        // TODO add your handling code here:
        int keyLength = Integer.parseInt(KeyLengthList.getSelectedItem().toString());
        byte[] key = backend.generateBytes((int)Math.floor(keyLength/8));
        String keyHex = DatatypeConverter.printHexBinary(key);
        KeyInputField.setText(keyHex);
        LogField.append("\nRandom key generated.");
        LogField.append("\n"+key.length+" byte generated.");
        LogField.append("\n"+keyHex.length()+" long hex string shown converted from key bytes.");
        byte[] key2 = DatatypeConverter.parseHexBinary(keyHex);
        if(Arrays.equals(key, key2)){
            LogField.append("\nNo problem with keys");
        } else{
            LogField.append("\nproblem with converting keys");
        }
    }//GEN-LAST:event_RandomKeyBtnMouseClicked

    private void SameDirCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SameDirCheckboxItemStateChanged
        // TODO add your handling code here:
        if(SameDirCheckbox.isSelected()){
            FileOutputField.setText("");
            FileOutputField.setEditable(false);
            FileOutputField.setEnabled(false);
            FileOutputBtn.setEnabled(false);
        } else{
            FileOutputField.setEnabled(true);
            FileOutputField.setEditable(true);
            FileOutputBtn.setEnabled(true);
        }
    }//GEN-LAST:event_SameDirCheckboxItemStateChanged

	
	// Special buat tampilin gambar
	
	private void setFile(File file) {
		fileAs = file;
		setTitle("Cipher's file ~ " + file.getName());
	}

 	public static final byte[] intToByteArray(int value)
	{
             return new byte[] {
                     (byte)(value >>> 24),
                     (byte)(value >>> 16),
                     (byte)(value >>> 8),
                     (byte)value};
    }

 	public static final int byteArrayToInt(byte [] b) 
	{
    	     return (b[0] << 24)
                     + ((b[1] & 0xFF) << 16)
                     + ((b[2] & 0xFF) << 8)
                     + (b[3] & 0xFF);
    }

	public static void printByteArray(byte [] array)
	{
		System.out.print("{");
		for(int i=0;i<array.length;i++)
			System.out.print(" " + array[i]);
		System.out.println(" }");

	}

	public BufferedImage map(BufferedImage image, Cipher cipher) throws Exception{
		

		// Test if the coordinates are O.K.
		/*if(image.getWidth() % 2 != 0 && image.getHeight() % 2 != 0){
			throw(new Exception("Image size not multiple of 2 :("));
		}*/

		BufferedImage encImage = new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_4BYTE_ABGR);
		
		byte [] pixelBytes = new byte[(image.getWidth()*image.getHeight())*4];
		int counter = 0;
		
		for(int x=0;x<image.getWidth(); x++){
			for(int y=0;y<image.getHeight(); y++){
				int val = image.getRGB(x,y);

				byte [] sub  = intToByteArray(val);
				
				for(int k=0;k<4;k++) 
					pixelBytes[(counter)*4+k] = sub[k];
				counter++;
			}
		}
		byte[] enc = cipher.doFinal(pixelBytes);
		counter = 0;
		for(int x=0;x<image.getWidth(); x++){
			for(int y=0;y<image.getHeight(); y++){
				byte[] sub = new byte[4];
				for(int k=0;k<4;k++) {
					sub[k] = enc[(counter)*4+k];
				}
				int val = byteArrayToInt(sub);
				encImage.setRGB(x,y,val);
				counter++;
			}
		}
		return encImage;
	}
	
	//
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DecryptBtn;
    private javax.swing.JButton EncryptBtn;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JButton FileInputBtn;
    private javax.swing.JTextField FileInputField;
    private javax.swing.JButton FileOutputBtn;
    private javax.swing.JTextField FileOutputField;
    private javax.swing.JTextField InitialVectorField;
    private javax.swing.JPanel InitialVectorPanel;
    private javax.swing.JButton InitialVectorRandomBtn;
    private javax.swing.JPanel InputPanel;
    private javax.swing.JTextField KeyFileInputField;
    private javax.swing.JPanel KeyFilePanel;
    private javax.swing.JButton KeyFromFileBrowseBtn;
    private javax.swing.JTextField KeyInputField;
    private javax.swing.JComboBox<String> KeyLengthList;
    private javax.swing.JComboBox<String> KeyLengthListFile;
    private javax.swing.JPanel KeyPanel;
    private javax.swing.JTabbedPane KeyTabbedPanel;
    private javax.swing.JTextArea LogField;
    private javax.swing.JPanel OutputPanel;
    private javax.swing.JButton RandomKeyBtn;
    private javax.swing.JCheckBox SameDirCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
